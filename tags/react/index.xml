<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>React on Minko Gechev&#39;s blog</title>
    <link>http://blog.mgechev.com/tags/react/</link>
    <description>Recent content in React on Minko Gechev&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 30 Jan 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://blog.mgechev.com/tags/react/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Implementing Angular&#39;s Dependency Injection in React. Understanding Element Injectors.</title>
      <link>http://blog.mgechev.com/2017/01/30/implementing-dependency-injection-react-angular-element-injectors/</link>
      <pubDate>Mon, 30 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mgechev.com/2017/01/30/implementing-dependency-injection-react-angular-element-injectors/</guid>
      <description>Recently I&amp;rsquo;ve been blogging mostly about Angular and it&amp;rsquo;s not by accident! Angular is an amazing framework, bringing a lot of innovation to the front-end technologies, with a great community behind it. In the same time, the projects that I&amp;rsquo;m working on have various of different requirements and sometimes I need to consider different options.
Another great technology that I&amp;rsquo;ve used in the past is React. I don&amp;rsquo;t want to compare it with Angular; I&amp;rsquo;m sure there are variety of cases when one of them fits better compared to the other and visa versa.</description>
    </item>
    
    <item>
      <title>Flux in Depth. Store and Network Communication.</title>
      <link>http://blog.mgechev.com/2015/07/18/flux-in-depth-store-network-communication-services/</link>
      <pubDate>Sat, 18 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mgechev.com/2015/07/18/flux-in-depth-store-network-communication-services/</guid>
      <description>This is the second, and probably be the last, blog post of the series &amp;ldquo;Flux in Depth&amp;rdquo;. In the first post we did a quick overview of flux, took a look at the stateless, pure components, immutable data structures and component communication. This time, we&amp;rsquo;re going to introduce the store and how we can communicate with services through the network via HTTP, WebSocket or WebRTC. Since the flux architecture doesn&amp;rsquo;t define a way of communication with external services, here you can find my way of dealing with network communication.</description>
    </item>
    
    <item>
      <title>Using JSX with TypeScript</title>
      <link>http://blog.mgechev.com/2015/07/05/using-jsx-react-with-typescript/</link>
      <pubDate>Sun, 05 Jul 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mgechev.com/2015/07/05/using-jsx-react-with-typescript/</guid>
      <description>JavaScript is a weird language although, we love it the way it is. However, I&amp;rsquo;ve had quite a painful experience working on big JavaScript projects. It was painful in the same way it gets painful working on huge Ruby, Python, PHP projects.
Once you have code base above 10-15k lines of code and you decide to do some refactoring&amp;hellip;well it gets messy. Although grep and sed are powerful tools for text manipulation, when you start replacing code with them, you&amp;rsquo;re missing the semantics (or the context) of the snippets you substitute.</description>
    </item>
    
    <item>
      <title>Flux in Depth. Overview and Components.</title>
      <link>http://blog.mgechev.com/2015/05/15/flux-in-depth-overview-components/</link>
      <pubDate>Fri, 15 May 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mgechev.com/2015/05/15/flux-in-depth-overview-components/</guid>
      <description>This is the first blog post of the series &amp;ldquo;Flux in Depth&amp;rdquo;. Is this &amp;ldquo;yet the another flux tutorial&amp;rdquo;? What I have seen so far, while researching flux, were mostly &amp;ldquo;how-to&amp;rdquo; tutorials (usually with todo applications), which describe the main components of given flux application and the data flow between them. This is definitely useful for getting a high-level overview of how everything works but in reality there are plenty of other things, which should be taken under consideration.</description>
    </item>
    
  </channel>
</rss>