<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tooling on Minko Gechev&#39;s blog</title>
    <link>http://blog.mgechev.com/tags/tooling/</link>
    <description>Recent content in Tooling on Minko Gechev&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 23 Apr 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://blog.mgechev.com/tags/tooling/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>7 Angular Tools That You Should Consider</title>
      <link>http://blog.mgechev.com/2017/04/23/angular-tooling-codelyzer-angular-cli-ngrev/</link>
      <pubDate>Sun, 23 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mgechev.com/2017/04/23/angular-tooling-codelyzer-angular-cli-ngrev/</guid>
      <description>In this article we&amp;rsquo;re going to quickly explore 7 Angular development tools which can make our everyday life easier. The purpose of the list is to not be opinionated architecture wise. This means that we&amp;rsquo;re not going to discuss tooling which has impact over our choice of application state management, data layer, etc. For instance, although packages like ngrx/store devtools, universal, and others are amazing once we&amp;rsquo;ve chosen a specific architectural approach, we&amp;rsquo;re going to keep them out of this article because they assume we&amp;rsquo;re using a specific way of state management or application rendering.</description>
    </item>
    
    <item>
      <title>Announcing ngrev - Reverse Engineering Tool for Angular</title>
      <link>http://blog.mgechev.com/2017/04/09/reverse-engineering-for-angular-ngrev/</link>
      <pubDate>Sun, 09 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mgechev.com/2017/04/09/reverse-engineering-for-angular-ngrev/</guid>
      <description>Have you ever been hired to work on a huge legacy Angular project with thousands of NgModules, components, directives, pipes and services? Neither do I. Angular (2 and above) is still relatively new framework and there are not many enormous projects out there. On the other hand, Angular is powerful and in combination with TypeScript we can build big, enterprise applications.
Exploring an Application It&amp;rsquo;s hard to start digging into a large codebase without being aware of the overall structure of the project.</description>
    </item>
    
    <item>
      <title>Angular 2 Hot Loader</title>
      <link>http://blog.mgechev.com/2015/10/26/angular2-hot-loader-hot-loading-tooling/</link>
      <pubDate>Mon, 26 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mgechev.com/2015/10/26/angular2-hot-loader-hot-loading-tooling/</guid>
      <description>A couple of months ago I watched a few talks from ReactEurope. I was truly impressed by a few of them and especially by the one by Dan Abramov on redux and his hot loader. The tool he shown helps you do something similar to live-reload with one big difference. When you change the code of any of the components in your react application, the new version of the component is send to the application itself where all its instances are patched so the changes you did to be visible.</description>
    </item>
    
  </channel>
</rss>