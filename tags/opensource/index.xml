<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Opensource on Minko Gechev&#39;s blog</title>
    <link>http://blog.mgechev.com/tags/opensource/</link>
    <description>Recent content in Opensource on Minko Gechev&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Dec 2013 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://blog.mgechev.com/tags/opensource/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>AngularAOP v0.1.0</title>
      <link>http://blog.mgechev.com/2013/12/04/angularaop-v0-1-0/</link>
      <pubDate>Wed, 04 Dec 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mgechev.com/2013/12/04/angularaop-v0-1-0/</guid>
      <description>In this blog post I&amp;#8217;ll introduce you the new way of annotating services included in AngularAOP v0.1.0.
First, why we need a new way for annotation? In v0.0.1 the annotations were made in services&amp;#8217; bodies. It was something like this:
myApp.factory(&amp;#39;AwesomeService&amp;#39;, function (execute, d1, d2,...,dn) { var api = /* definition of our service api */ return execute(Logger).onThrowOf(execute(Authorization).before(api, { methodPattern: /Special|getArticleById/, argsPatterns: [/^user$/, /^[Ii]d(_num)?$/] })); });  This way of annotating services led to coupling between the services and the API of the AngularAOP&amp;#8217;s aspect factory service called execute.</description>
    </item>
    
    <item>
      <title>Advanced JavaScript at Sofia University</title>
      <link>http://blog.mgechev.com/2013/10/24/advanced-javascript-in-sofia-university/</link>
      <pubDate>Thu, 24 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mgechev.com/2013/10/24/advanced-javascript-in-sofia-university/</guid>
      <description>In this blog post I&amp;#8217;ll tell few words about the course Advanced JavaScript which Georgi Penkov, Evgeni Kunev and me are leading this semester in Sofia University.
I was included as a lecturer in it after my project for Practical Programming with Perl (plainvm) which is created by Georgi Penkov. The idea behind the course is not to concentrate on the syntax of JavaScript but to introduce to the students different modern technologies.</description>
    </item>
    
    <item>
      <title>AngularJS style guide</title>
      <link>http://blog.mgechev.com/2013/10/06/angularjs-style-guide/</link>
      <pubDate>Sun, 06 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mgechev.com/2013/10/06/angularjs-style-guide/</guid>
      <description>Today I created a GitHub repository which contains a set of good practices and style guides for AngularJS application development.
Its main goal is to be community-driven and to concentrate all the best practices for AngularJS development in one place.
I&amp;#8217;ve collected these guidelines mostly from my own experience and the source code of AngularJS. I guess there are missing things thats why I&amp;#8217;ll try to fill the gaps in future.</description>
    </item>
    
    <item>
      <title>VNC client on 200 lines of JavaScript</title>
      <link>http://blog.mgechev.com/2013/08/30/vnc-javascript-nodejs/</link>
      <pubDate>Fri, 30 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mgechev.com/2013/08/30/vnc-javascript-nodejs/</guid>
      <description>In this quick blog post I&amp;#8217;ll show you how to create a simple VNC client in about 200 lines of JavaScript. For our goal we&amp;#8217;re going to use only HTML5 and JavaScript (client and server side). The end result will be something like this:

So, let&amp;#8217;s begin!
Our application will have very simple architecture &amp;#8211; a proxy server written in Node.js and a client in HTML5 and JavaScript. The Node.</description>
    </item>
    
    <item>
      <title>plainvm</title>
      <link>http://blog.mgechev.com/2013/01/11/virtualization-into-the-browser/</link>
      <pubDate>Fri, 11 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mgechev.com/2013/01/11/virtualization-into-the-browser/</guid>
      <description>plainvm can take the virtualization into different level of usage. To prove this I&amp;#8217;ll first ask few rhetorical questions and put their answers&amp;#8230;Which is the programming language which everyone has interpreter for? Java? Actually no! Does iOS supports Java applets for example?! No! Everyone has a browser in his smartphone. Every browser (well may be I should exclude lynx, links&amp;#8230;) has JavaScript interpreter. And what is the common thing between all modern devices (and actually the devices most wide spread) &amp;#8211; the browser.</description>
    </item>
    
  </channel>
</rss>