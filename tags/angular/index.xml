<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Angular on Minko Gechev&#39;s blog</title>
    <link>http://blog.mgechev.com/tags/angular/</link>
    <description>Recent content in Angular on Minko Gechev&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 23 Apr 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://blog.mgechev.com/tags/angular/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>7 Angular Tools That You Should Consider</title>
      <link>http://blog.mgechev.com/2017/04/23/angular-tooling-codelyzer-angular-cli-ngrev/</link>
      <pubDate>Sun, 23 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mgechev.com/2017/04/23/angular-tooling-codelyzer-angular-cli-ngrev/</guid>
      <description>In this article we&amp;rsquo;re going to quickly explore 7 Angular development tools which can make our everyday life easier. The purpose of the list is to not be opinionated architecture wise. This means that we&amp;rsquo;re not going to discuss tooling which has impact over our choice of application state management, data layer, etc. For instance, although packages like ngrx/store devtools, universal, and others are amazing once we&amp;rsquo;ve chosen a specific architectural approach, we&amp;rsquo;re going to keep them out of this article because they assume we&amp;rsquo;re using a specific way of state management or application rendering.</description>
    </item>
    
    <item>
      <title>Announcing ngrev - Reverse Engineering Tool for Angular</title>
      <link>http://blog.mgechev.com/2017/04/09/reverse-engineering-for-angular-ngrev/</link>
      <pubDate>Sun, 09 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mgechev.com/2017/04/09/reverse-engineering-for-angular-ngrev/</guid>
      <description>Have you ever been hired to work on a huge legacy Angular project with thousands of NgModules, components, directives, pipes and services? Neither do I. Angular (2 and above) is still relatively new framework and there are not many enormous projects out there. On the other hand, Angular is powerful and in combination with TypeScript we can build big, enterprise applications.
Exploring an Application It&amp;rsquo;s hard to start digging into a large codebase without being aware of the overall structure of the project.</description>
    </item>
    
    <item>
      <title>Implementing Angular&#39;s Dependency Injection in React. Understanding Element Injectors.</title>
      <link>http://blog.mgechev.com/2017/01/30/implementing-dependency-injection-react-angular-element-injectors/</link>
      <pubDate>Mon, 30 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mgechev.com/2017/01/30/implementing-dependency-injection-react-angular-element-injectors/</guid>
      <description>Recently I&amp;rsquo;ve been blogging mostly about Angular and it&amp;rsquo;s not by accident! Angular is an amazing framework, bringing a lot of innovation to the front-end technologies, with a great community behind it. In the same time, the projects that I&amp;rsquo;m working on have various of different requirements and sometimes I need to consider different options.
Another great technology that I&amp;rsquo;ve used in the past is React. I don&amp;rsquo;t want to compare it with Angular; I&amp;rsquo;m sure there are variety of cases when one of them fits better compared to the other and visa versa.</description>
    </item>
    
    <item>
      <title>Distributing an Angular Library - The Brief Guide</title>
      <link>http://blog.mgechev.com/2017/01/21/distributing-an-angular-library-aot-ngc-types/</link>
      <pubDate>Sat, 21 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mgechev.com/2017/01/21/distributing-an-angular-library-aot-ngc-types/</guid>
      <description>In this post I&amp;rsquo;ll quickly explain the minimum you need to know in order to publish an Angular component to npm. By the end of the post you&amp;rsquo;ll know how your module can:
 Be platform independent (i.e. run in Web Workers, Universal). Should be bundled and distributed. Work with the Angular&amp;rsquo;s Ahead-of-Time compiler. Play well with TypeScript by allowing autocompletion and compile-time type checking.  If you&amp;rsquo;re only interested in a quick checklist of things you need to consider for distributing your Angular library, go directly to the &amp;ldquo;Distributing an Angular Library - Checklist&amp;rdquo; section.</description>
    </item>
    
    <item>
      <title>Angular in Production</title>
      <link>http://blog.mgechev.com/2017/01/17/angular-in-production/</link>
      <pubDate>Tue, 17 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mgechev.com/2017/01/17/angular-in-production/</guid>
      <description>In this informal essay I&amp;rsquo;ll go through a case study of my experience in using Angular (2 and above) in production.
Last April, together with a small team, we started working on an educational application; the second version of a product that I developed about 3 years ago using Angular 1.
The product targets young kids and their parents. It&amp;rsquo;s purpose is to motivate kids to learn maths by earning rewards.</description>
    </item>
    
    <item>
      <title>Ahead-of-Time Compilation in Angular</title>
      <link>http://blog.mgechev.com/2016/08/14/ahead-of-time-compilation-angular-offline-precompilation/</link>
      <pubDate>Sun, 14 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mgechev.com/2016/08/14/ahead-of-time-compilation-angular-offline-precompilation/</guid>
      <description>Recently I added Ahead-of-Time (AoT) compilation support to angular-seed and got a lot of questions about the new feature. In order to answer most of them, we will start from the beginning by explaining the following topics:
 Why we need compilation in Angular? What needs to be compiled? How it gets compiled? When the compilation takes place? Just-in-Time (JiT) vs Ahead-of-Time (AoT). What we get from AoT? How the AoT compilation works?</description>
    </item>
    
    <item>
      <title>Using Stripe with Angular</title>
      <link>http://blog.mgechev.com/2016/07/05/using-stripe-payment-with-angular-2/</link>
      <pubDate>Tue, 05 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mgechev.com/2016/07/05/using-stripe-payment-with-angular-2/</guid>
      <description>Stripe offer a set of APIs which allow businesses and individuals to easily accept and manage payments online. In a typical scenario you want your users to pay for a service that you&amp;rsquo;re offering using Stripe as a mediator.
On the other hand, Angular is gathering more and more popularity. A lot of developers are including the framework as part of their production applications.
In this blog post we will briefly describe what problems you may face using the Stripe APIs with Angular and how you can solve them.</description>
    </item>
    
    <item>
      <title>ViewChildren and ContentChildren in Angular</title>
      <link>http://blog.mgechev.com/2016/01/23/angular2-viewchildren-contentchildren-difference-viewproviders/</link>
      <pubDate>Sat, 23 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mgechev.com/2016/01/23/angular2-viewchildren-contentchildren-difference-viewproviders/</guid>
      <description>In this article I&amp;rsquo;m going to explain the difference between the concepts of view children and content children in Angular. We will take a look at how we can pass access these two different kinds of children from their parent component. Along the content we are also going to mention what the difference between the properties providers and viewProviders of the @Component decorator is.
You can find the source code of the current article at my GitHub account.</description>
    </item>
    
    <item>
      <title>What I get from the JavaScript MV* frameworks</title>
      <link>http://blog.mgechev.com/2014/02/12/what-i-get-from-the-javascript-mv-mvw-frameworks/</link>
      <pubDate>Wed, 12 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.mgechev.com/2014/02/12/what-i-get-from-the-javascript-mv-mvw-frameworks/</guid>
      <description>Why should I use JavaScript MVC, MVVM, MVP or simply MVW(hatever works for you)?
When I talk with people, who are beginners/intermediate in JavaScript I’m often asked this question. They are usually people who, until now, have used JavaScript only for making their website “fancier” – adding client-side form validation, creating carousel, checking whether a user already exists with simple Ajax request. When you start building something bigger (+10k lines of JavaScript) I truly believe that there are a few benefits from using such micro-architectural frameworks.</description>
    </item>
    
  </channel>
</rss>